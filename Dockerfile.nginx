# Build stage
FROM node:20-alpine as builder
WORKDIR /app

# Install dependencies first for better caching
COPY package*.json ./
RUN npm ci --only=production

# Copy source code and build
COPY . .
RUN npm run build

# Production stage
FROM nginx:stable-alpine

# Install certbot and required tools
RUN apk add --no-cache \
    certbot \
    openssl \
    bash \
    tzdata \
    && rm -rf /var/cache/apk/*

# Set timezone
ENV TZ=America/Sao_Paulo

# Create necessary directories
RUN mkdir -p /etc/letsencrypt/live/m1theus.ddns.net \
    && mkdir -p /var/www/certbot \
    && mkdir -p /var/log/nginx \
    && mkdir -p /var/cache/nginx

# Remove default nginx config
RUN rm -f /etc/nginx/conf.d/*

# Copy nginx configuration
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf
COPY nginx/options-ssl-nginx.conf /etc/letsencrypt/options-ssl-nginx.conf
COPY nginx/ssl-dhparams.pem /etc/letsencrypt/ssl-dhparams.pem

# Copy built files from builder
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy initialization scripts
COPY nginx/init-letsencrypt.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/init-letsencrypt.sh

# Set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html \
    && chmod -R 755 /usr/share/nginx/html \
    && chown -R nginx:nginx /var/cache/nginx \
    && chown -R nginx:nginx /var/log/nginx \
    && chown -R nginx:nginx /etc/nginx/conf.d

# Switch to non-root user
USER nginx

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

# Expose ports
EXPOSE 80
EXPOSE 443

# Start Nginx with debug logging if it fails
CMD ["/bin/sh", "-c", "nginx -g 'daemon off;' || (cat /var/log/nginx/error.log && exit 1)"]
